# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jBwgfk35odPkeo2MbQYZImssjCiDR0rw
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import silhouette_score, davies_bouldin_score

st.set_page_config(page_title="Customer Segmentation", layout="wide")

st.title("🛍️ Customer Segmentation using KMeans")

# Load data
df = pd.read_csv("Synthetic_Mall_Customers_500.csv")

le = LabelEncoder()
df["Gender"] = le.fit_transform(df["Gender"])

# Select features for clustering
X = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Elbow Method
inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=0)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

# Show Elbow Plot
st.subheader("📉 Elbow Method")
fig1, ax1 = plt.subplots()
ax1.plot(range(1, 11), inertia, marker='o')
ax1.set_xlabel("Number of Clusters")
ax1.set_ylabel("Inertia")
ax1.set_title("Elbow Method for Optimal K")
st.pyplot(fig1)

# Fit KMeans with optimal K
kmeans = KMeans(n_clusters=4, random_state=0)
df['Cluster'] = kmeans.fit_predict(X)

# Segment Labels
cluster_labels = {
    0: 'High Income - Low Spending',
    1: 'Low Income - High Spending',
    2: 'High Income - High Spending',
    3: 'Low Income - Low Spending'
}
df['Segment'] = df['Cluster'].map(cluster_labels)

# Cluster Visualization
st.subheader("📊 Customer Segments")
fig2, ax2 = plt.subplots()
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Segment', palette='Set2', ax=ax2)
ax2.set_title("Customer Segments Visualization")
st.pyplot(fig2)

# Metrics
st.subheader("📈 Evaluation Metrics")
sil_score = silhouette_score(X, df['Cluster'])
db_score = davies_bouldin_score(X, df['Cluster'])
st.markdown(f"✅ **Silhouette Score:** `{sil_score:.2f}` (0.3–0.5: reasonable)")
st.markdown(f"⚠️ **Davies-Bouldin Score:** `{db_score:.2f}` (lower is better)")

# Segment Summary
st.subheader("📋 Segment Summary")
segment_summary = df.groupby("Segment").mean(numeric_only=True)
st.dataframe(segment_summary.style.highlight_max(axis=0))

# Business Insights
st.subheader("💡 Business Insights")
st.markdown("""
- 🟢 **High Income - High Spending**: Most valuable customers. Offer loyalty programs.
- 🟡 **High Income - Low Spending**: Potential customers. Promote premium offers.
- 🟠 **Low Income - High Spending**: Impulse buyers. Bundle offers or discounts.
- 🔴 **Low Income - Low Spending**: Least active. Collect feedback or offer strong promotions.
""")